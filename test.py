import unittest
from unittest.mock import AsyncMock, MagicMock, patch, PropertyMock
import discord
from discord.ext import commands
from cogs.list import List
from cogs.utils import Utils

class TestDiscordBot(unittest.IsolatedAsyncioTestCase):
    async def asyncSetUp(self):
        # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω—Ç–µ–Ω—Ç–∏ –¥–ª—è –±–æ—Ç–∞
        intents = discord.Intents.default()
        intents.message_content = True  # –î–æ–∑–≤–æ–ª—è—î —á–∏—Ç–∞—Ç–∏ –≤–º—ñ—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π –±–æ—Ç –∑ —ñ–Ω—Ç–µ–Ω—Ç–∞–º–∏
        self.bot = commands.Bot(command_prefix="!", intents=intents)
        self.list_cog = List(self.bot)
        self.utils_cog = Utils(self.bot)
        await self.bot.add_cog(self.list_cog)
        await self.bot.add_cog(self.utils_cog)

    async def test_hello_command(self):
        # –ú–æ–∫–∞—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥–∏
        ctx = MagicMock()
        ctx.author.name = "TestUser"
        ctx.send = AsyncMock()

        # –í–∏–∫–ª–∏–∫–∞—î–º–æ –∫–æ–º–∞–Ω–¥—É
        await self.list_cog.hello(ctx)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –±—É–ª–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ ctx.send –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
        ctx.send.assert_called_once_with("Hello, TestUser! üëã")

    async def test_ping_command(self):
        # –ú–æ–∫–∞—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥–∏
        ctx = MagicMock()
        ctx.send = AsyncMock()
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ PropertyMock –¥–ª—è –∑–∞–º—ñ–Ω–∏ latency
        with patch('discord.ext.commands.Bot.latency', new_callable=PropertyMock) as mock_latency:
            mock_latency.return_value = 0.123  # –ú–æ–∫–∞—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –±–æ—Ç–∞

            # –í–∏–∫–ª–∏–∫–∞—î–º–æ –∫–æ–º–∞–Ω–¥—É
            await self.list_cog.ping(ctx)

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –±—É–ª–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ ctx.send –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
            ctx.send.assert_called_once_with("Ping! Latency: 123ms")

    async def test_tip_command(self):
        # –ú–æ–∫—É—î–º–æ –º–µ—Ç–æ–¥ get_db
        with patch.object(self.utils_cog, 'get_db') as mock_get_db:
            # –ú–æ–∫–∞—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥–∏
            ctx = MagicMock()
            ctx.author.mention = "@TestUser"
            ctx.author.id = 12345
            ctx.send = AsyncMock()
            member = MagicMock()
            member.mention = "@AnotherUser"
            member.id = 67890

            # –ú–æ–∫—É—î–º–æ —Å–µ—Å—ñ—é –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
            mock_session = MagicMock()
            mock_get_db.return_value.__enter__.return_value = mock_session
            mock_get_db.return_value.__iter__.return_value = [mock_session]

            # –í–∏–∫–ª–∏–∫–∞—î–º–æ –∫–æ–º–∞–Ω–¥—É
            await self.utils_cog.tip(ctx, member, reason="helpful advice")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –±—É–ª–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ ctx.send –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
            ctx.send.assert_called_once_with("‚ò†Ô∏è @TestUser tipped @AnotherUser for helpful advice ‚ò†Ô∏è")

    async def test_list_command(self):
        # –ú–æ–∫–∞—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥–∏
        ctx = MagicMock()
        ctx.send = AsyncMock()

        # –í–∏–∫–ª–∏–∫–∞—î–º–æ –∫–æ–º–∞–Ω–¥—É
        await self.list_cog.list_commands(ctx)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –±—É–ª–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ ctx.send
        ctx.send.assert_called_once()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —î Embed
        embed = ctx.send.call_args[1]["embed"]
        self.assertEqual(embed.title, "üìã Bot Command List")
        self.assertIn("üéµ Music", [field.name for field in embed.fields])

if __name__ == "__main__":
    unittest.main()
